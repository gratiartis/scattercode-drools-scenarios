package uk.co.scattercode.drools.scenarios.ccygroup;

import java.util.ArrayList;
import java.math.BigDecimal;


/**
 * We don't explicitly define currency groups. Rather, we define mappings from 
 * currencies to arbitrarily named groups. 
 * This rule finds all CurrencyGroupCurrency defined and creates a CurrencyGroup
 * in working memory for each different group.
 */
rule "Initialise currency group"
	salience 100
	dialect "java"
when
	$gc : CurrencyGroupCurrency()
	not ( CurrencyGroup( name == $gc.group ) )
then
	insert( new CurrencyGroup($gc.getGroup()) );
end


/**
 * Mappings from currency group to currency are inserted individually.
 * When a CurrencyGroup has been generated, this rule collects those 
 * mappings to populate a CurrencyGroup.
 */
rule "Determine group currencies"
	salience 90
	dialect "java"
	// No-loop needed due to update of LHS CurrencyGroup.
	no-loop
when
	$group: CurrencyGroup()
	CurrencyGroupCurrency( group == $group.name, $ccy: currency not memberOf $group.currencies )
then
	modify($group) {
		addCurrency($ccy)
	}
end


/**
 * Mappings from currency group to currency are inserted individually.
 * This rule collects those mappings to populate a CurrencyGroup with 
 * the list of currencies it relates to.
 */
rule "Remove retracted currency"
	salience 90
	dialect "java"
when
	$group : CurrencyGroup()
	$ccy : String() from $group.currencies
	not CurrencyGroupCurrency( group == $group.name, currency == $ccy )
then
	modify($group) {
		removeCurrency($ccy)
	}
end


/**
 * In the system we can have numerous currency exposures. Currencies can be assigned 
 * to multiple (or zero) arbitrary groups. i.e. "Developed", "Emerging Markets", etc.
 * We would like to see what the aggregated exposure is across a particular group.
 * A CurrencyGroupCurrency maps a single group to a single currency.  
 */
rule "Summarise currency group exposures"
	dialect "java"
	// No-loop needed due to update of LHS CurrencyGroupExposure.
	no-loop
when
	$group : CurrencyGroup()
	
	accumulate( CurrencyExposure( currency memberOf $group.currencies, $exp : exposure );
			$sumExp : sum( $exp )
    )
then
	modify( $group ) {
		setExposure(new BigDecimal($sumExp.doubleValue()))
	}
end

